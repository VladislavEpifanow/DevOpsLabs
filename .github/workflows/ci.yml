name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify package-lock.json
      run: |
        if [ ! -f "package-lock.json" ]; then
          echo "##[error] package-lock.json not found!"
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Start and verify backend server
      run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > server.log 2>&1 &
          sleep 5
          if ! pgrep -f 'uvicorn'; then
            echo "::error::Server failed to start. Check server.log for details"
            cat server.log
            exit 1
          fi

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    defaults:
      run:
        working-directory: client
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: npm ci
    
    - name: Set environment variable for testing
      run: |
        echo "VITE_API_URL=http://localhost:8000" >> .env
        
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --ci
      env:
        CI: true
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: client/coverage


  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    defaults:
      run:
        working-directory: server
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install test dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml
    - name: Display coverage report
      run: |
        coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: server/coverage.xml
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
    - uses: actions/checkout@v4

    - name: Install SonarQube Scanner
      run: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner.zip -d $HOME
        export PATH=$HOME/sonar-scanner-4.6.2.2472-linux/bin:$PATH

    - name: Run SonarQube Scanner for Frontend
      run: |
        cd client
        sonar-scanner \
          -Dproject.settings=sonar-project.properties \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Run SonarQube Scanner for Backend
      run: |
        cd server
        sonar-scanner \
          -Dproject.settings=sonar-project.properties \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}