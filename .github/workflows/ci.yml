name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify package-lock.json
      run: |
        if [ ! -f "package-lock.json" ]; then
          echo "##[error] package-lock.json not found!"
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Start and verify backend server
      run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > server.log 2>&1 &
          sleep 5
          if ! pgrep -f 'uvicorn'; then
            echo "::error::Server failed to start. Check server.log for details"
            cat server.log
            exit 1
          fi

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    defaults:
      run:
        working-directory: client
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: npm ci
    
    - name: Set environment variable for testing
      run: |
        echo "VITE_API_URL=http://localhost:8000" >> .env
        
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --ci
      env:
        CI: true
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: client/coverage/lcov.info


  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    defaults:
      run:
        working-directory: server
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install test dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml
    - name: Display coverage report
      run: |
        coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: server/coverage.xml
  
  sonarqube-frontend:
    name: SonarQube Analysis - Frontend
    runs-on: ubuntu-latest
    environment: devopslabs
    needs: [test-frontend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download frontend coverage report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: temp-coverage

      - name: Move coverage report to correct location
        run: |
          mkdir -p client/coverage
          mv temp-coverage/lcov.info client/coverage/lcov.info

      - name: SonarQube Scan Frontend
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        with:
          args: >
            -Dsonar.projectKey=devopslabs-frontend
            -Dsonar.projectBaseDir=client
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*.test.tsx,**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/node_modules/**
            -Dsonar.exclusions=**/node_modules/**,**/public/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Check Quality Gate status
        run: |
          echo "Waiting for SonarQube to finish analysis..."
          sleep 15
  
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=devopslabs-frontend" | jq -r '.projectStatus.status')
  
          echo "Quality Gate status: $STATUS"
  
          if [ "$STATUS" != "OK" ]; then
            echo "::error::Quality Gate failed with status: $STATUS"
            exit 1
          fi

  sonarqube-backend:
    name: SonarQube Analysis - Backend
    runs-on: ubuntu-latest
    environment: devopslabs
    needs: [test-backend]
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Download backend coverage report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: .
  
      - name: SonarQube Scan Backend
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        with:
          args: >
            -Dsonar.projectKey=devopslabs-backend
            -Dsonar.projectBaseDir=server
            -Dsonar.sources=.
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**/*.py
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.coverage.exclusions=tests/**
            -Dsonar.exclusions=tests/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      - name: Check Quality Gate status
        run: |
          echo "Waiting for SonarQube to finish analysis..."
          sleep 15
  
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=devopslabs-frontend" | jq -r '.projectStatus.status')
  
          echo "Quality Gate status: $STATUS"
  
          if [ "$STATUS" != "OK" ]; then
            echo "::error::Quality Gate failed with status: $STATUS"
            exit 1
          fi
